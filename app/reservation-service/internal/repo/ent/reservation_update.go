// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bookit/internal/repo/ent/predicate"
	"bookit/internal/repo/ent/reservation"
	"bookit/internal/repo/ent/room"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ReservationUpdate is the builder for updating Reservation entities.
type ReservationUpdate struct {
	config
	hooks    []Hook
	mutation *ReservationMutation
}

// Where appends a list predicates to the ReservationUpdate builder.
func (ru *ReservationUpdate) Where(ps ...predicate.Reservation) *ReservationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetStartsAt sets the "starts_at" field.
func (ru *ReservationUpdate) SetStartsAt(t time.Time) *ReservationUpdate {
	ru.mutation.SetStartsAt(t)
	return ru
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableStartsAt(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetStartsAt(*t)
	}
	return ru
}

// SetEndsAt sets the "ends_at" field.
func (ru *ReservationUpdate) SetEndsAt(t time.Time) *ReservationUpdate {
	ru.mutation.SetEndsAt(t)
	return ru
}

// SetNillableEndsAt sets the "ends_at" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableEndsAt(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetEndsAt(*t)
	}
	return ru
}

// SetRoomID sets the "room_id" field.
func (ru *ReservationUpdate) SetRoomID(u uuid.UUID) *ReservationUpdate {
	ru.mutation.SetRoomID(u)
	return ru
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableRoomID(u *uuid.UUID) *ReservationUpdate {
	if u != nil {
		ru.SetRoomID(*u)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *ReservationUpdate) SetCreatedAt(t time.Time) *ReservationUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableCreatedAt(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReservationUpdate) SetUpdatedAt(t time.Time) *ReservationUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableUpdatedAt(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReservationUpdate) SetDeletedAt(t time.Time) *ReservationUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableDeletedAt(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ReservationUpdate) ClearDeletedAt() *ReservationUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetRoom sets the "room" edge to the Room entity.
func (ru *ReservationUpdate) SetRoom(r *Room) *ReservationUpdate {
	return ru.SetRoomID(r.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ru *ReservationUpdate) Mutation() *ReservationMutation {
	return ru.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ru *ReservationUpdate) ClearRoom() *ReservationUpdate {
	ru.mutation.ClearRoom()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReservationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReservationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReservationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReservationUpdate) check() error {
	if _, ok := ru.mutation.RoomID(); ru.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.room"`)
	}
	return nil
}

func (ru *ReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reservation.Table, reservation.Columns, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.StartsAt(); ok {
		_spec.SetField(reservation.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.EndsAt(); ok {
		_spec.SetField(reservation.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(reservation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(reservation.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(reservation.FieldDeletedAt, field.TypeTime)
	}
	if ru.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.RoomTable,
			Columns: []string{reservation.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.RoomTable,
			Columns: []string{reservation.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReservationUpdateOne is the builder for updating a single Reservation entity.
type ReservationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReservationMutation
}

// SetStartsAt sets the "starts_at" field.
func (ruo *ReservationUpdateOne) SetStartsAt(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetStartsAt(t)
	return ruo
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableStartsAt(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetStartsAt(*t)
	}
	return ruo
}

// SetEndsAt sets the "ends_at" field.
func (ruo *ReservationUpdateOne) SetEndsAt(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetEndsAt(t)
	return ruo
}

// SetNillableEndsAt sets the "ends_at" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableEndsAt(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetEndsAt(*t)
	}
	return ruo
}

// SetRoomID sets the "room_id" field.
func (ruo *ReservationUpdateOne) SetRoomID(u uuid.UUID) *ReservationUpdateOne {
	ruo.mutation.SetRoomID(u)
	return ruo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableRoomID(u *uuid.UUID) *ReservationUpdateOne {
	if u != nil {
		ruo.SetRoomID(*u)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *ReservationUpdateOne) SetCreatedAt(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableCreatedAt(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReservationUpdateOne) SetUpdatedAt(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableUpdatedAt(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReservationUpdateOne) SetDeletedAt(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableDeletedAt(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ReservationUpdateOne) ClearDeletedAt() *ReservationUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetRoom sets the "room" edge to the Room entity.
func (ruo *ReservationUpdateOne) SetRoom(r *Room) *ReservationUpdateOne {
	return ruo.SetRoomID(r.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ruo *ReservationUpdateOne) Mutation() *ReservationMutation {
	return ruo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruo *ReservationUpdateOne) ClearRoom() *ReservationUpdateOne {
	ruo.mutation.ClearRoom()
	return ruo
}

// Where appends a list predicates to the ReservationUpdate builder.
func (ruo *ReservationUpdateOne) Where(ps ...predicate.Reservation) *ReservationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReservationUpdateOne) Select(field string, fields ...string) *ReservationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reservation entity.
func (ruo *ReservationUpdateOne) Save(ctx context.Context) (*Reservation, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReservationUpdateOne) SaveX(ctx context.Context) *Reservation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReservationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReservationUpdateOne) check() error {
	if _, ok := ruo.mutation.RoomID(); ruo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reservation.room"`)
	}
	return nil
}

func (ruo *ReservationUpdateOne) sqlSave(ctx context.Context) (_node *Reservation, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reservation.Table, reservation.Columns, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reservation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reservation.FieldID)
		for _, f := range fields {
			if !reservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.StartsAt(); ok {
		_spec.SetField(reservation.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.EndsAt(); ok {
		_spec.SetField(reservation.FieldEndsAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(reservation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reservation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(reservation.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(reservation.FieldDeletedAt, field.TypeTime)
	}
	if ruo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.RoomTable,
			Columns: []string{reservation.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.RoomTable,
			Columns: []string{reservation.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reservation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
