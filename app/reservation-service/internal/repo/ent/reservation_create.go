// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bookit/internal/repo/ent/reservation"
	"bookit/internal/repo/ent/room"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ReservationCreate is the builder for creating a Reservation entity.
type ReservationCreate struct {
	config
	mutation *ReservationMutation
	hooks    []Hook
}

// SetStartsAt sets the "starts_at" field.
func (rc *ReservationCreate) SetStartsAt(t time.Time) *ReservationCreate {
	rc.mutation.SetStartsAt(t)
	return rc
}

// SetEndsAt sets the "ends_at" field.
func (rc *ReservationCreate) SetEndsAt(t time.Time) *ReservationCreate {
	rc.mutation.SetEndsAt(t)
	return rc
}

// SetRoomID sets the "room_id" field.
func (rc *ReservationCreate) SetRoomID(u uuid.UUID) *ReservationCreate {
	rc.mutation.SetRoomID(u)
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReservationCreate) SetCreatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableCreatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReservationCreate) SetUpdatedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableUpdatedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ReservationCreate) SetDeletedAt(t time.Time) *ReservationCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableDeletedAt(t *time.Time) *ReservationCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReservationCreate) SetID(u uuid.UUID) *ReservationCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ReservationCreate) SetNillableID(u *uuid.UUID) *ReservationCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetRoom sets the "room" edge to the Room entity.
func (rc *ReservationCreate) SetRoom(r *Room) *ReservationCreate {
	return rc.SetRoomID(r.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (rc *ReservationCreate) Mutation() *ReservationMutation {
	return rc.mutation
}

// Save creates the Reservation in the database.
func (rc *ReservationCreate) Save(ctx context.Context) (*Reservation, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReservationCreate) SaveX(ctx context.Context) *Reservation {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReservationCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReservationCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReservationCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reservation.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reservation.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := reservation.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReservationCreate) check() error {
	if _, ok := rc.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "Reservation.starts_at"`)}
	}
	if _, ok := rc.mutation.EndsAt(); !ok {
		return &ValidationError{Name: "ends_at", err: errors.New(`ent: missing required field "Reservation.ends_at"`)}
	}
	if _, ok := rc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "Reservation.room_id"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reservation.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reservation.updated_at"`)}
	}
	if _, ok := rc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "Reservation.room"`)}
	}
	return nil
}

func (rc *ReservationCreate) sqlSave(ctx context.Context) (*Reservation, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReservationCreate) createSpec() (*Reservation, *sqlgraph.CreateSpec) {
	var (
		_node = &Reservation{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reservation.Table, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.StartsAt(); ok {
		_spec.SetField(reservation.FieldStartsAt, field.TypeTime, value)
		_node.StartsAt = value
	}
	if value, ok := rc.mutation.EndsAt(); ok {
		_spec.SetField(reservation.FieldEndsAt, field.TypeTime, value)
		_node.EndsAt = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reservation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reservation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(reservation.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := rc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.RoomTable,
			Columns: []string{reservation.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReservationCreateBulk is the builder for creating many Reservation entities in bulk.
type ReservationCreateBulk struct {
	config
	err      error
	builders []*ReservationCreate
}

// Save creates the Reservation entities in the database.
func (rcb *ReservationCreateBulk) Save(ctx context.Context) ([]*Reservation, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reservation, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReservationCreateBulk) SaveX(ctx context.Context) []*Reservation {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReservationCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReservationCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
